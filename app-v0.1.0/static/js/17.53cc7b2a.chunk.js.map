{"version":3,"sources":["components/common/ToastLoading.js","components/AccountImport.js"],"names":["ToastLoading","props","React","useState","progress","setProgress","useEffect","timer","setInterval","prevProgress","clearInterval","className","IconButton","size","color","onClick","closeSnackbar","snackKey","CircularProgress","variant","value","thickness","QrCamera","lazy","AccountImport","state","dialogQr","dialogImport","privateKey","wallet_name","wallet_secret","handleDialogImportOpen","setState","handleDialogImportClose","handleDialogQrOpen","handleDialogQrClose","qrStoreResult","importPrivateKey","error","console","log","enqueueSnackbar","action","loadWallet","a","t","this","Box","p","mb","Typography","gutterBottom","TextField","label","type","onChange","e","target","placeholder","fullWidth","multiline","margin","InputProps","endAdornment","InputAdornment","position","Button","disabled","startIcon","Dialog","onClose","open","DialogContent","fallback","LoadingSpinner","DialogActions","autoFocus","Component","withTranslation","withSnackbar"],"mappings":"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","file":"static/js/17.53cc7b2a.chunk.js","sourcesContent":["import React from \"react\";\r\n//material-ui\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Close from \"@mui/icons-material/Close\";\r\n\r\nexport default function ToastLoading(props) {\r\n  const [progress, setProgress] = React.useState(100);\r\n  React.useEffect(() => {\r\n    setProgress(100);\r\n    const timer = setInterval(() => {\r\n      setProgress((prevProgress) => (prevProgress <= 0 ? 0 : prevProgress - 2));\r\n    }, 100);\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"toastSpinnerWrapper\">\r\n      <IconButton\r\n        size=\"small\"\r\n        color=\"secondary\"\r\n        onClick={() => {\r\n          props.closeSnackbar(props.snackKey);\r\n        }}\r\n      >\r\n        <Close />\r\n      </IconButton>\r\n      <CircularProgress variant=\"determinate\" value={progress} color=\"secondary\" size={36} thickness={2} className=\"toastSpinner\" />\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component, Suspense } from \"react\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { withSnackbar } from \"notistack\";\r\n//material-ui\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\n//icons\r\nimport CameraAlt from \"@mui/icons-material/CameraAlt\";\r\nimport Publish from \"@mui/icons-material/Publish\";\r\n//custom\r\nimport LoadingSpinner from \"./common/LoadingSpinner\";\r\nimport ToastLoading from \"./common/ToastLoading\";\r\n//lazy\r\nconst QrCamera = React.lazy(() => import(\"./common/QrCamera\"));\r\n\r\nclass AccountImport extends Component {\r\n  state = {\r\n    dialogQr: false,\r\n    dialogImport: false,\r\n    privateKey: \"\",\r\n    wallet_name: \"digitalgv_wallet\",\r\n    wallet_secret: \"SECRET\",\r\n  };\r\n\r\n  handleDialogImportOpen = () => {\r\n    this.setState({ dialogImport: true });\r\n  };\r\n  handleDialogImportClose = () => {\r\n    this.setState({ dialogImport: false });\r\n  };\r\n  handleDialogQrOpen = () => {\r\n    this.setState({ dialogQr: true });\r\n  };\r\n  handleDialogQrClose = () => {\r\n    this.setState({ dialogQr: false });\r\n  };\r\n  qrStoreResult = (privateKey) => {\r\n    this.setState({ privateKey });\r\n  };\r\n  importPrivateKey = () => {\r\n    try {\r\n      this.setState({\r\n        privateKey: \"\",\r\n        dialogImport: false,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      this.props.enqueueSnackbar(\"Error\", {\r\n        variant: \"error\",\r\n        action: (snackKey) => <ToastLoading snackKey={snackKey} closeSnackbar={this.props.closeSnackbar} />,\r\n      });\r\n    }\r\n  };\r\n\r\n  loadWallet = async () => {\r\n\r\n  };\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    const { dialogQr, privateKey, dialogImport } = this.state;\r\n\r\n    return (\r\n      <Box p={2}>\r\n        <Box mb={4}>\r\n          <Typography variant=\"h2\" gutterBottom>\r\n            {t(\"wallet.importTitle\")}\r\n          </Typography>\r\n          <Typography variant=\"body2\" gutterBottom>\r\n            {t(\"wallet.importDescription\")}\r\n          </Typography>\r\n          <TextField\r\n            label={t(\"wallet.fieldPrivateKey\")}\r\n            type=\"text\"\r\n            value={privateKey}\r\n            onChange={(e) => this.setState({ privateKey: e.target.value })}\r\n            placeholder={t(\"wallet.fieldPrivateKeyPlaceholder\")}\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            multiline\r\n            margin=\"normal\"\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <Button color=\"primary\" variant=\"contained\" disabled={!privateKey} startIcon={<Publish />} onClick={this.handleDialogImportOpen}>\r\n                    {t(\"wallet.importPrivateKey\")}\r\n                  </Button>\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n        </Box>\r\n        <Box mb={4}>\r\n          <Typography variant=\"h2\" gutterBottom>\r\n            {t(\"wallet.importScanQRTitle\")}\r\n          </Typography>\r\n          <Typography variant=\"body2\" gutterBottom>\r\n            {t(\"wallet.importScanQRDescription\")}\r\n          </Typography>\r\n          <Button color=\"primary\" variant=\"outlined\" startIcon={<CameraAlt />} onClick={this.handleDialogQrOpen}>\r\n            {t(\"wallet.importScanQRButton\")}\r\n          </Button>\r\n        </Box>\r\n\r\n        <Dialog onClose={this.handleDialogQrClose} aria-labelledby=\"dialogInfo\" open={dialogQr} fullWidth>\r\n          <DialogContent>\r\n            <Typography variant=\"h2\">{t(\"wallet.importScanQRButton\")}</Typography>\r\n            <Suspense fallback={<LoadingSpinner />}>\r\n              <QrCamera qrStoreResult={this.qrStoreResult} />\r\n            </Suspense>\r\n            <Typography variant=\"body2\">\r\n              {t(\"wallet.importScanQRResult\")} {privateKey}\r\n            </Typography>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleDialogQrClose} color=\"primary\" autoFocus>\r\n              {t(\"base.close\")}\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        <Dialog onClose={this.handleDialogImportClose} aria-labelledby=\"dialogInfo\" open={dialogImport}>\r\n          <DialogContent>\r\n            <Typography variant=\"h2\" gutterBottom>\r\n              {t(\"base.confirm\")}\r\n            </Typography>\r\n            <Typography variant=\"body2\" gutterBottom>\r\n              {t(\"wallet.importConfirmDescription\")}\r\n            </Typography>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleDialogImportClose} color=\"primary\">\r\n              {t(\"base.cancel\")}\r\n            </Button>\r\n            <Button onClick={this.importPrivateKey} color=\"primary\" variant=\"contained\" autoFocus>\r\n              {t(\"base.confirm\")}\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(withSnackbar(AccountImport));\r\n"],"sourceRoot":""}